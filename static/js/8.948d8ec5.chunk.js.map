{"version":3,"sources":["utils/erc20.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","hooks/useTokenBalance.ts","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","div","pow","toNumber","color","style","lineHeight","useTokenBalance","ethereum","fetchBalance","CakeWalletBalance","cakeBalance","getMeowthAddress","getBalanceNumber","StyledFarmStakingCard","styled","Card","Block","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","slowRefresh","useBurnedBalance","meowthSupply","Hero","mediaQueries","lg","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard"],"mappings":"qPAMaA,EAAc,SAACC,EAAwBC,GAGlD,OADiB,IADJ,IAAIC,IAAKF,GACIG,IAAIC,UAAUC,EAA8BJ,IAiB3DK,EAAe,uCAAG,WAC7BN,EACAO,EACAC,GAH6B,iBAAAC,EAAA,6DAKvBC,EAAWX,EAAYC,EAAUO,GALV,kBAOGG,EAASC,QAAQC,UAAUJ,GAAaK,OAP3C,cAOrBC,EAPqB,yBAQpBA,GARoB,yDAUpB,KAVoB,yDAAH,2D,yQCgBbC,EA3Ba,WAAO,IAAD,EACkBC,mBAA4B,IAD9C,mBACzBC,EADyB,KACNC,EADM,KAExBC,EAAYC,cAAZD,QACAE,EAAgBC,cAAhBD,YAqBR,OAnBAE,qBAAU,WAcJJ,GAbe,uCAAG,gCAAAV,EAAA,6DACde,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvC1B,QAAS2B,cACTC,KAAM,gBACNC,OAAQ,CAACH,EAAKI,IAAKZ,OAJD,SAOKa,YAAUC,EAAeT,GAP9B,OAOdU,EAPc,OAQdC,EAAUV,IAAYC,KAAI,SAACC,EAAMS,GAAP,mBAAC,eAAsBT,GAAvB,IAA6Bb,QAAS,IAAIuB,IAAUH,EAAWE,SAE/FlB,EAAqBiB,GAVD,2CAAH,oDAcjBG,KAED,CAACnB,EAASE,IAENJ,G,SCJMsB,EA1BQ,WAAO,IAAD,EACIvB,mBAAS,IADb,mBACpBwB,EADoB,KACVC,EADU,KAEnBtB,EAAiCC,cAAjCD,QACAE,EAAgBC,cAAhBD,YAoBR,OAlBAE,qBAAU,WAaJJ,GAZkB,uCAAG,8BAAAV,EAAA,6DACjBe,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvC1B,QAAS2B,cACTC,KAAM,gBACNC,OAAQ,CAACH,EAAKI,IAAKZ,OAJE,SAOLa,YAAUC,EAAeT,GAPpB,OAOjBkB,EAPiB,OASvBD,EAAWC,GATY,2CAAH,oDAapBC,KAED,CAACxB,EAASE,IAENmB,G,gBCGMI,EAxB6B,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAkC,IAAxBC,gBAAwB,MAAb,OAAa,IAC1DC,qBAAW,CACrCC,MAAO,EACPC,IAAKL,EACLM,SAAU,EACVC,UAAW,IACXN,cAEeO,IAAbP,EAAyBA,EAAWD,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlES,EAD8E,EAC9EA,QAASC,EADqE,EACrEA,OAUXC,EAAcC,iBAAOF,GAM3B,OAJAhC,qBAAU,WACRiC,EAAYE,QAAQb,KACnB,CAACA,EAAOW,IAGT,cAAC,IAAD,CAAMG,MAAI,EAACZ,SAAUA,EAArB,SACGO,KCFQM,EAnBY,WACzB,IAAMC,EAAkBC,cAChB3C,EAAYC,cAAZD,QAEF4C,EADcxB,IACYyB,QAAO,SAACC,EAAOC,GAC7C,OAAOD,EAAQ,IAAI5B,IAAU6B,GAASC,IAAI,IAAI9B,IAAU,IAAI+B,IAAI,KAAKC,aACpE,GAEH,OAAKlD,EAQE,cAAC,EAAD,CAAW0B,MAAOkB,IANrB,cAAC,IAAD,CAAMO,MAAM,eAAeC,MAAO,CAAEC,WAAY,QAAhD,SACGX,EAAgB,IAAK,a,0BC8CfY,EAvDS,SAAClE,GAA0B,IAAD,EAClBS,mBAAS,IAAIqB,IAAU,IADL,mBACzCvB,EADyC,KAChC2B,EADgC,OAEuBrB,cAA/DD,EAFwC,EAExCA,QAASuD,EAF+B,EAE/BA,SACTrD,EAAgBC,cAAhBD,YAaR,OAXAE,qBAAU,WAMJJ,GAAWuD,GALG,uCAAG,4BAAAjE,EAAA,sEACDH,YAAgBoE,EAAUnE,EAAcY,GADvC,OACbuB,EADa,OAEnBD,EAAW,IAAIJ,IAAUK,IAFN,2CAAH,oDAMhBiC,KAED,CAACxD,EAASuD,EAAUnE,EAAcc,IAE9BP,G,QCDM8D,EAhBW,WACxB,IAAMf,EAAkBC,cAClBe,EAAcJ,EAAgBK,eAGpC,OAFoB1D,cAAZD,QAUD,cAAC,EAAD,CAAW0B,MAAOkC,YAAiBF,GAAc9B,SAAS,SAN7D,cAAC,IAAD,CAAMuB,MAAM,eAAeC,MAAO,CAAEC,WAAY,QAAhD,SACGX,EAAgB,IAAK,aCNxBmB,EAAwBC,YAAOC,IAAPD,CAAH,8KAOrBE,EAAQF,IAAOd,IAAV,oDAILiB,EAAYH,IAAOI,IAAV,oDAITC,EAAQL,IAAOd,IAAV,+DACA,qBAAGoB,MAAkBC,OAAOC,cAIjCC,EAAUT,IAAOd,IAAV,iDA4DEwB,EAxDW,WAAO,IAAD,EACI3E,oBAAS,GADb,mBACvB4E,EADuB,KACZC,EADY,KAEtB1E,EAAYC,cAAZD,QACF0C,EAAkBC,cAElBgC,EADmB/E,IACkBgF,QAAO,SAACC,GAAD,OAAiBA,EAAYlF,QAAQuD,WAAa,KAE5F4B,EAAaC,YAAcJ,EAAkBpE,KAAI,SAACyE,GAAD,OAAqBA,EAAgBpE,QAAtFkE,SAEFG,EAAkBC,sBAAW,sBAAC,sBAAA5F,EAAA,6DAClCoF,GAAa,GADqB,kBAG1BI,IAH0B,6EAOhCJ,GAAa,GAPmB,0EASjC,CAACI,IAEJ,OACE,cAACjB,EAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASsB,KAAK,KAAKC,GAAG,OAAtB,SACG1C,EAAgB,IAAK,qBAExB,cAACuB,EAAD,CAAWoB,IAAI,0BAA0BC,IAAI,cAAcC,MAAO,IAAKC,OAAQ,MAC/E,eAACxB,EAAD,WACE,cAAC,EAAD,IACA,cAACG,EAAD,UAAQzB,EAAgB,IAAK,gCAE/B,eAACsB,EAAD,WACE,cAAC,EAAD,IACA,cAACG,EAAD,UAAQzB,EAAgB,IAAK,+BAE/B,cAAC6B,EAAD,UACGvE,EACC,cAAC,IAAD,CACEyF,GAAG,cACHC,SAAUf,EAAkBgB,QAAU,GAAKlB,EAC3CmB,QAASX,EACTY,WAAS,EAJX,SAMGpB,EACG/B,EAAgB,IAAK,2BACrBA,EAAgB,IAAD,uBAAsBiC,EAAkBgB,OAAxC,QAGrB,cAACG,EAAA,EAAD,CAAcD,WAAS,YC1E7BE,EAAkBjC,YAAOC,IAAPD,CAAH,yEAKfkC,EAAMlC,IAAOd,IAAV,oJA0DMiD,GAlDG,WAChB,IAAMvD,EAAkBC,cAClBuD,EHKsB,WAAO,IAC3BhG,EAAgBC,cAAhBD,YAD0B,EAEIL,qBAFJ,mBAE3BqG,EAF2B,KAEdC,EAFc,KAclC,OAVA/F,qBAAU,WAAM,4CACd,8BAAAd,EAAA,6DACQ8G,EAAexH,YAAYyH,EAAS1C,eAD5C,SAEuByC,EAAa5G,QAAQ0G,cAAcxG,OAF1D,OAEQ4G,EAFR,OAGEH,EAAe,IAAIjF,IAAUoF,IAH/B,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACrG,IAEGgG,EGnBaM,GACdC,EHqBwB,SAACrH,GAA0B,IAAD,EAC1BS,mBAAS,IAAIqB,IAAU,IADG,mBACjDvB,EADiD,KACxC2B,EADwC,OAEerB,cAA/DD,EAFgD,EAEhDA,QAASuD,EAFuC,EAEvCA,SACTmD,EAAgBvG,cAAhBuG,YAaR,OAXAtG,qBAAU,WAMJJ,GAAWuD,GALG,uCAAG,4BAAAjE,EAAA,sEACDH,YAAgBoE,EAAUnE,EAAc,8CADvC,OACbmC,EADa,OAEnBD,EAAW,IAAIJ,IAAUK,IAFN,2CAAH,oDAMhBiC,KAED,CAACxD,EAASuD,EAAUnE,EAAcsH,IAE9B/G,EGrCegH,CAAiBhD,eACjCiD,EAAeV,EAActC,YAAiBsC,GAAetC,YAAiB6C,GAAiB,EAErG,OACE,cAACV,EAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASZ,KAAK,KAAKC,GAAG,OAAtB,SACG1C,EAAgB,IAAK,WAExB,cAAC,IAAD,CAASyC,KAAK,KAAKC,GAAG,MAAtB,SACG1C,EAAgB,IAAK,YAExB,eAACsD,EAAD,WACE,cAAC,IAAD,CAAMpE,SAAS,OAAf,SAAuBc,EAAgB,IAAK,yBAC3CkE,GAAgB,cAAC,EAAD,CAAWhF,SAAS,OAAOF,MAAOkF,OAErD,eAACZ,EAAD,WACE,cAAC,IAAD,CAAMpE,SAAS,OAAf,SAAuBc,EAAgB,IAAK,yBAC5C,cAAC,EAAD,CAAWd,SAAS,OAAOF,MAAOkC,YAAiB6C,QAErD,eAACT,EAAD,WACE,cAAC,IAAD,CAAMpE,SAAS,OAAf,SAAuBc,EAAgB,IAAK,sBAC5C,cAAC,EAAD,CAAWd,SAAS,OAAOD,SAAU,EAAGD,MAAO,cClCnDmF,GAAO/C,IAAOd,IAAV,ghBAaN,qBAAGoB,MAAkB0C,aAAaC,MAQhCC,GAAQlD,YAAOmD,IAAPnD,CAAH,8SAUP,qBAAGM,MAAkB0C,aAAaI,MAMlC,qBAAG9C,MAAkB0C,aAAaC,MAOhCI,GAAWrD,YAAOmD,IAAPnD,CAAH,6PAQV,qBAAGM,MAAkB0C,aAAaI,MAMlC,qBAAG9C,MAAkB0C,aAAaC,MA6CvBK,GAtCQ,WACrB,IAAM1E,EAAkBC,cAExB,OACE,eAAC0E,EAAA,EAAD,WACE,eAACR,GAAD,WACE,cAAC,IAAD,CAASS,GAAG,KAAKnC,KAAK,KAAKC,GAAG,OAAOjC,MAAM,YAA3C,SACGT,EAAgB,IAAK,yBAExB,cAAC,IAAD,UAAOA,EAAgB,IAAK,6CAE9B,gCACE,eAACsE,GAAD,WACE,cAACO,EAAD,IACA,cAAC,GAAD,OAEF,cAACJ,GAAD","file":"static/js/8.948d8ec5.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingMeowth',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingMeowth',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px' }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getMeowthAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { fastRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getMeowthAddress())\n      const supply = await cakeContract.methods.totalSupply().call();    \n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [fastRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, '0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getMeowthAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getMeowthAddress())\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={getBalanceNumber(cakeBalance)} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  // background-image: url('/images/meowth-head.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/meowth-head.svg\" alt=\"meowth logo\" width={128} height={128} />\n        <Block>\n          <CakeHarvestBalance />\n          <Label>{TranslateString(544, 'MEOWTH Coins to Harvest')}</Label>\n        </Block>\n        <Block>\n          <CakeWalletBalance />\n          <Label>{TranslateString(546, 'MEOWTH Coins in Wallet')}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting MEOWTH Coins')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getMeowthAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getMeowthAddress())\n  const meowthSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"36px\">\n          {TranslateString(534, 'Stats')}\n        </Heading>\n        <Heading size=\"xs\" mb=\"8px\">\n          {TranslateString(534, 'Meowth')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total MEOWTH Supply')}</Text>\n          {meowthSupply && <CardValue fontSize=\"14px\" value={meowthSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total MEOWTH Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New MEOWTH/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={25} />\n        </Row>\n        {/* <Heading size=\"xs\" mb=\"8px\" mt=\"48px\">\n          {TranslateString(534, 'Wynaut')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total WYNAUT Supply')}</Text>\n          {meowthSupply && <CardValue fontSize=\"14px\" value={meowthSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total WYNAUT Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} />\n        </Row>\n        <Heading size=\"xs\" mb=\"8px\" mt=\"48px\">\n          {TranslateString(534, 'TVL')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Value Locked')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} />\n        </Row> */}\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/meowth.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 162px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/meowth-coins.svg'), url('/images/wynaut-coins.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'TEAM ROCKET FINANCE')}\n        </Heading>\n        <Text>{TranslateString(578, 'Yield farming on Binance Smart Chain')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <CakeStats />\n        </Cards>\n        <CTACards>\n          {/* <EarnAPYCard />\n          <TotalValueLockedCard /> */}\n        </CTACards>\n        {/* <Cards>\n          <FarmStakingCard />\n          <LotteryCard />\n        </Cards>\n        <CTACards>\n          <EarnAPYCard />\n          <EarnAssetCard />\n          <WinCard />\n        </CTACards>\n        <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards> */}\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}