{"version":3,"sources":["utils/erc20.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","hooks/useTokenBalance.ts","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","div","pow","toNumber","color","style","lineHeight","useTokenBalance","ethereum","fetchBalance","CakeWalletBalance","cakeBalance","getMeowthAddress","getBalanceNumber","StyledFarmStakingCard","styled","Card","Block","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","useBurnedBalance","meowthSupply","StyledTotalValueLockedCard","RainbowLight","keyframes","TotalValueLockedCard","cakePrice","usePriceCakeBusd","bnbPrice","usePriceBnbBusd","farmsLP","useFarms","pools","usePools","farmsList","farmsToDisplay","removed","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","CAKE_PER_BLOCK","times","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","BNB","poolsWithApy","pool","isBnbPool","poolCategory","PoolCategory","BINANCE","stakingTokenFarm","s","tokenSymbol","stakingTokenName","totalStaked","newTvl","accumulator","currentValue","tvlString","isNaN","Number","toLocaleString","maximumFractionDigits","data","setData","fetch","response","json","responsedata","console","error","fetchData","useGetStats","total_value_locked_all","textAlign","Cards","mediaQueries","lg","BaseLayout","sm","CTACards","Home","Page","padding","FarmStakingCard"],"mappings":"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","file":"static/js/8.5745d343.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingMeowth',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingMeowth',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px' }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getMeowthAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getMeowthAddress())\n      const supply = await cakeContract.methods.totalSupply().call();    \n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, '0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getMeowthAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getMeowthAddress())\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={getBalanceNumber(cakeBalance)} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  // background-image: url('/images/meowth-head.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/meowth-head.svg\" alt=\"meowth logo\" width={128} height={128} />\n        <Block>\n          <CakeHarvestBalance />\n          <Label>{TranslateString(544, 'MEOWTH to Pick Up')}</Label>\n        </Block>\n        <Block>\n          <CakeWalletBalance />\n          <Label>{TranslateString(546, 'MEOWTH in Wallet')}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Picking Up MEOWTH')\n                : TranslateString(532, `Pick Up (${balancesWithValue.length} pools)`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getMeowthAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getMeowthAddress())\n  const meowthSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"36px\">\n          {TranslateString(534, 'Stats')}\n        </Heading>\n        <Heading size=\"xs\" mb=\"8px\">\n          {TranslateString(534, 'Meowth')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total MEOWTH Supply')}</Text>\n          {meowthSupply && <CardValue fontSize=\"14px\" value={meowthSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total MEOWTH Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New MEOWTH/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={25} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React, { useCallback, useMemo } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { provider } from 'web3-core'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useFarms, usePools, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport BigNumber from 'bignumber.js'\nimport { CAKE_POOL_PID, CAKE_PER_BLOCK, BLOCKS_PER_YEAR } from 'config'\nimport { PoolCategory, QuoteToken } from 'config/constants/types'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/CardActionsContainer'\nimport FarmCard from 'views/Farms/components/FarmCard/FarmCard'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  width: 100%;\n  text-align: center;\n`\n\nconst RainbowLight = keyframes` \n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(8px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n  opacity: 0.5;\n`\n\nconst TotalValueLockedCard = () => {\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const farmsLP = useFarms()\n  const pools = usePools(account)\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => {\n        let totalValue: BigNumber = new BigNumber('0')\n\n        if (!farm.lpTotalInQuoteToken) {\n          totalValue = null\n        } else if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = bnbPrice.times(farm.lpTotalInQuoteToken)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          totalValue = cakePrice.times(farm.lpTotalInQuoteToken)\n        } else {\n          totalValue = farm.lpTotalInQuoteToken\n        }\n\n        return totalValue\n      })\n    },\n    [farmsLP, bnbPrice, cakePrice],\n  )\n\n  const poolsWithApy = pools.map((pool) => {\n    const isBnbPool = pool.poolCategory === PoolCategory.BINANCE\n    const stakingTokenFarm = farmsLP.find((s) => s.tokenSymbol === pool.stakingTokenName)\n\n    // tmp mulitplier to support ETH farms\n    // Will be removed after the price api\n    const tempMultiplier = 1\n\n    // /!\\ Assume that the farm quote price is BNB\n    const stakingTokenPriceInBNB = isBnbPool\n      ? new BigNumber(1)\n      : new BigNumber(stakingTokenFarm?.tokenPriceVsQuote).times(tempMultiplier)\n\n    const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked)).times(bnbPrice)\n\n    return totalStakingTokenInPool\n  })\n\n  const newTvl = [...farmsList(farmsLP, false), ...poolsWithApy].reduce((accumulator, currentValue) =>\n    (accumulator || new BigNumber(0)).plus(currentValue),\n  )\n  const tvlString = newTvl.isNaN() ? null : Number(newTvl).toLocaleString('en-US', { maximumFractionDigits: 0 })\n  const TranslateString = useI18n()\n  const data = useGetStats()\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <>\n      {/* <StyledCardAccent /> */}\n      <StyledTotalValueLockedCard>\n        <CardBody style={{ width: '100%', textAlign: 'center' }}>\n          <Heading size=\"lg\" mb=\"24px\">\n            {TranslateString(762, 'Total Value Locked (TVL)')}\n          </Heading>\n          {data && tvlString ? (\n            <>\n              <Heading size=\"xl\">{`$${tvlString}`}</Heading>\n              <Text color=\"textSubtle\">{TranslateString(764, 'Across all LPs and Pay Day Pool')}</Text>\n            </>\n          ) : (\n            <>\n              <Skeleton height={66} />\n            </>\n          )}\n        </CardBody>\n      </StyledTotalValueLockedCard>\n    </>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/*\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */\nexport const baseUrl = 'https://api.pancakeswap.com/api/v1'\n\n/* eslint-disable camelcase */\n\nexport interface TradePair {\n  swap_pair_contract: string\n  base_symbol: string\n  quote_symbol: string\n  last_price: number\n  base_volume_24_h: number\n  quote_volume_24_h: number\n}\n\nexport interface ApiStatResponse {\n  update_at: string\n  '24h_total_volume': number\n  total_value_locked: number\n  total_value_locked_all: number\n  trade_pairs: {\n    [key: string]: TradePair\n  }\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<ApiStatResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`${baseUrl}/stat`)\n        const responsedata: ApiStatResponse = await response.json()\n\n        setData(responsedata)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/meowth.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 162px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/meowth-coins.svg'), url('/images/wynaut-coins.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: center;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 12;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 12;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 12;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>    \n      <Text style={{ color: 'red', fontSize: 48, textAlign: 'center', padding: 30 }}>\n        {TranslateString(578, 'The new team are working things out. Stay tuned.')}\n      </Text>\n\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <CakeStats />\n        </Cards>\n        <CTACards>\n          <TotalValueLockedCard />\n          {/* <EarnAPYCard /> */}\n        </CTACards>\n        {/* <Cards>\n          <FarmStakingCard />\n          <LotteryCard />\n        </Cards>\n        <CTACards>\n          <EarnAPYCard />\n          <EarnAssetCard />\n          <WinCard />\n        </CTACards>\n        <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards> */}\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}